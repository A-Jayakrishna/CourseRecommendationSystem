import pandas as pd 
import numpy as np
import os
import matplotlib.pyplot as plt 
import altair as alt

from rake_nltk import Rake
from nltk.corpus import stopwords 
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import CountVectorizer
from flask import Flask,render_template,request,jsonify,session

FILTERED_COURSES = None
SELECTED_COURSE = None

app = Flask(__name__)

class CourseData():
    a, b = None, None
	  

data = CourseData()


@app.route('/')
def index():
	df2 = load_data()
	skills_avail = []
	for i in range(1000):
		skills_avail = skills_avail + df2['skills'][i]
	skills_avail = list(set(skills_avail))
	return render_template('index1.html',content=skills_avail)

@app.route("/ajax_add", methods=["POST","GET"])
def ajax_add():
	df5 = load_data()
	skills_avail = []
	for i in range(1000):
		skills_avail = skills_avail + df5['skills'][i]
	skills_avail = list(set(skills_avail))

	if request.method == "POST":
		# print("Inititally: ", request.form['recommend'])
		# print("Inititally: ", type(request.form['recommend']))

		print("request.form: ", request.form.getlist('skills'))
		skills_selected = request.form.getlist('skills')

		print("skills selected: ", skills_selected)
		print("type of skills: ",type(skills_selected))
		temp = filter(df5, skills_selected, 'skills', 'course_url')

		print("temp: ", temp)
		skill_filtered = df5[df5['course_url'].isin(temp)].reset_index()

		print("skill_filtered: ", skill_filtered)
		courses = skill_filtered['course_name']

		data.a = courses
		

		courses_list = skill_filtered['course_name'].tolist()

		data.b = courses_list
		courses1 = skill_filtered[['course_name','course_url']]
		print("courses: ", courses)
		print("Number of courses selected: ", len(courses))

		return render_template('index.html', data=courses1, content=skills_avail, courses = courses_list)

@app.route("/ui_course_recommend", methods=["POST","GET"])
def ui_course_recommend():
	df6 = load_data()
	skills_avail = []
	for i in range(1000):
		skills_avail = skills_avail + df6['skills'][i]
	skills_avail = list(set(skills_avail))

	print("Inititally: ", request.form['recommend'])
	print("Inititally: ", type(request.form['recommend']))

	if request.form['recommend'] == "yes":
		input_course = request.form['course_selected']
		courses = data.a 
		skills_selected = data.b 
		temp_sim, temp_dissim = content_based_recommendations(df6, input_course, courses)

		return render_template('index312.html', tables=[temp_sim.to_html(classes='data'), temp_dissim.to_html(classes='data')], titles=['na','Similar Courses','Dissimilar Courses'], content=skills_selected, selected_course = input_course)


@app.route("/final_page", methods = ["POST", "GET"])
def final_page():
	df6 = load_data()
	print("request.form: ", request.form)
	input_course = request.form['input_skill']
	courses = data.a 
	skills_selected = data.b 

	print("courses: ", courses)
	print("skills selected: ", skills_selected)
	print("input course: ", input_course)
	temp_sim, temp_dissim = content_based_recommendations(df6, input_course, courses)

	return render_template('result.html', tables1=[temp_sim.to_html(classes='data'), temp_dissim.to_html(classes='data')], titles1=['na','Similar Courses','Dissimilar Courses'], content1=skills_selected, selected_course1 = input_course)



# @st.cache(persist=True)
def clean_col_names(df, columns):
	"""
	Cleans column names
	-----
	columns:
		List of column names
	"""

	new = []
	for c in columns:
		new.append(c.lower().replace(' ','_'))
	return new

# @st.cache(persist=True)
def prepare_data(df):
	"""
	Prepares the final dataset
	-----
	df:
		dataframe
	"""

	# clean column names
	df.columns = clean_col_names(df, df.columns)

	# impute missing values that creeped in
	df['skills'] = df['skills'].fillna('Missing')
	df['instructors'] = df['instructors'].fillna('Missing')

	# making certain features numeric
	def make_numeric(x):
		if(x=='Missing'):
			return np.nan
		return float(x)

	df['course_rating'] = df['course_rating'].apply(make_numeric)
	df['course_rated_by'] = df['course_rated_by'].apply(make_numeric)
	df['percentage_of_new_career_starts'] = df['percentage_of_new_career_starts'].apply(make_numeric)
	df['percentage_of_pay_increase_or_promotion'] = df['percentage_of_pay_increase_or_promotion'].apply(make_numeric)

	def make_count_numeric(x):
	    if('k' in x):
	        return (float(x.replace('k','')) * 1000)
	    elif('m' in x):
	        return (float(x.replace('m','')) * 1000000)
	    elif('Missing' in x):
	        return (np.nan)

	df['enrolled_student_count'] = df['enrolled_student_count'].apply(make_count_numeric)

    # extract time to complete
	def find_time(x):
	    l = x.split(' ')
	    idx = 0
	    for i in range(len(l)):
	        if(l[i].isdigit()):
	            idx = i 
	    try:
	        return (l[idx] + ' ' + l[idx+1])
	    except:
	        return l[idx]

	df['estimated_time_to_complete'] = df['estimated_time_to_complete'].apply(find_time)

	# split by skills
	def split_it(x):
		return (x.split(','))
	df['skills'] = df['skills'].apply(split_it)

	return df

# @st.cache(allow_output_mutation=True)
def load_data():
	source_path1 = os.path.join("data/coursera-courses-overview.csv")
	source_path2 = os.path.join("data/coursera-individual-courses.csv")
	df_overview = pd.read_csv(source_path1)
	df_individual = pd.read_csv(source_path2)
	df = pd.concat([df_overview, df_individual], axis=1)

	# preprocess it now
	df = prepare_data(df)

	return df

# @st.cache(persist=True)
def filter(dataframe, chosen_options, feature, id):
	selected_records = []
	for i in range(1000):
		for op in chosen_options:
			if op in dataframe[feature][i]:
				selected_records.append(dataframe[id][i])
	return selected_records

# def extract_keywords(df, feature):
#     r = Rake()
#     keyword_lists = []
#     for i in range(1000):
#         descr = df[feature][i]
#         r.extract_keywords_from_text(descr)
#         key_words_dict_scores = r.get_word_degrees()
#         keywords_string = " ".join(list(key_words_dict_scores.keys()))
#         keyword_lists.append(keywords_string)
        
#     return keyword_lists



def extract_keywords(df, feature):

    r = Rake()
    keyword_lists = []
    for i in range(df[feature].shape[0]):
        descr = df[feature][i]
        descr1 = ' '.join(descr)
        r.extract_keywords_from_text(descr1)
        key_words_dict_scores = r.get_word_degrees()
        keywords_string = " ".join(list(key_words_dict_scores.keys()))
        keyword_lists.append(keywords_string)

    print("extract_keywords: ", keyword_lists)
    print("len of keyword_lists:", len(keyword_lists))
    print("shape: ",df[feature].shape[0] )
    return keyword_lists

def get_index_from_title(df, course):
    return df[df.course_name == course].index[0]


def get_course_from_index(df, index):
    return df.loc[index]

def recommendations(df, input_course, cosine_sim, find_similar=True, how_many=2):
    
	course_index = get_index_from_title(df, input_course)
	similar_courses = list(enumerate(cosine_sim[course_index]))
	sorted_similar_courses = sorted(similar_courses, key=lambda x:x[1], reverse=True)

	i = 0
	similar_courses_index = []
	for course in sorted_similar_courses:
		print("course inside similar recommendations: ",course)
		if i <= how_many+1:
			similar_courses_index.append(course[0])
			i+=1
		else:
			break

	temp_sim = df.loc[similar_courses_index]	

	j = 0
	dissimilar_courses_index = []
	for course in sorted_similar_courses[::-1]:
		print("course inside dissimilar recommendations: ",course)
		if j <= how_many+1:
			dissimilar_courses_index.append(course[0])
			j+=1
		else:
			break

	temp_dissim = df.loc[dissimilar_courses_index]

	return temp_sim, temp_dissim
    # # initialise recommended courses list
    # recommended = []
    # print("input_course: ", input_course)

    # selected_course = df[df['course_name']==input_course]
    # print("selected_course: ", selected_course)

    # # index of the course fed as input
    # idx = selected_course.index[0]
    # print("idx: ", idx)

    # # creating a Series with the similarity scores in descending order
    # if find_similar:
    #     print("Inside find similar")
    #     score_series = pd.Series(cosine_sim[idx]).sort_values(ascending = False)
    # else:
    #     print("Inside dissimilar: ")
    #     score_series = pd.Series(cosine_sim[idx]).sort_values(ascending = True)
    
    # print("score_series: ", score_series)

    # # getting the indexes of the top 'how_many' courses
    # if (len(score_series) < how_many):
    # 	how_many = len(score_series)
        
    # print("list how many: ", score_series.iloc[1:how_many+1])
    # top_sugg = list(score_series.iloc[:how_many+1].index)

    # print("top_sugg: ", top_sugg)
    # # populating the list with the titles of the best 10 matching movies
    # for i in top_sugg:
    #     qualified = df['course_name'].iloc[i]
    #     print("qualified: ", qualified)
    #     recommended.append(qualified)
    
    # print("recommended: ", recommended)
    # return recommended, top_sugg

def content_based_recommendations(df, input_course, courses):
	print("input course: ", input_course)
	print("courses: ", courses)
	# filter out the courses
	# df = df[df['course_name'].isin(courses)].reset_index()
	print("dataframe: ", df)

	# df = df[df['course_name'].isin(courses)].reset_index()


	print("df.description: ", df["description"])

	# create description keywords
	# df['descr_keywords'] = extract_keywords(df, 'description')
	df['descr_keywords'] = extract_keywords(df, 'skills')

	# instantiating and generating the count matrix
	count = CountVectorizer()
	print("df.description: ", df["description"])
	count_matrix = count.fit_transform(df['descr_keywords'])
	# generating the cosine similarity matrix
	cosine_sim = cosine_similarity(count_matrix)

	# make the recommendation
	temp_sim, temp_dissim = recommendations(df, input_course, cosine_sim, True)
	# print("rec_courses_similar: ",rec_courses_similar)
	# temp_sim = df[df['course_name'].isin(rec_courses_similar)].reindex(top_sugg)
	# print("temp_sim: ",temp_sim)
	# rec_courses_dissimilar, top_sugg1 = recommendations(df, input_course, cosine_sim, False)
	# print("rec_courses_dissimilar: ",rec_courses_dissimilar)
	# temp_dissim = df[df['course_name'].isin(rec_courses_dissimilar)].reindex(top_sugg1)
	# print("temp_dissim: ",temp_dissim)    
	return temp_sim, temp_dissim

# def prep_for_cbr(df):

# 	# content-based filtering
# 	# st.header("Content-based Recommendation")
# 	# st.sidebar.header("Filter on Preferences")
# 	# st.write("This section is entrusted with the responsibility of"
# 	# 	" analysing a filtered subset of courses based on the **skills**"
# 	# 	" a learner is looking to develop. This filter can be adjusted on"
# 	# 	" the sidebar.")
# 	# st.write("This section also finds courses similar to a selected course"
# 	# 	" based on Content-based recommendation. The learner can choose"
# 	# 	" any course that has been filtered on the basis of their skills"
# 	# 	" in the previous section.")
# 	# st.write("Choose course from 'Select Course' dropdown on the sidebar")

# 	# filter by skills
# 	skills_avail = []
# 	for i in range(1000):
# 		skills_avail = skills_avail + df['skills'][i]
# 	skills_avail = list(set(skills_avail))
# 	skills_select = st.sidebar.multiselect("Select Skills", skills_avail)
# 	# use button to make the update of filtering
# 	skill_filtered = None
# 	courses = None
# 	input_course = "Nothing"
# 	#if st.sidebar.button("Filter Courses"):
# 	temp = filter(df, skills_select, 'skills', 'course_url')
# 	skill_filtered = df[df['course_url'].isin(temp)].reset_index()
# 	# update filtered courses
# 	courses = skill_filtered['course_name']
# 	st.write("### Filtered courses based on skill preferences")
# 	st.write(skill_filtered)
# 	# some more info
# 	st.write("**Number of programmes filtered:**",skill_filtered.shape[0])
# 	st.write("**Number of courses:**",
# 		skill_filtered[skill_filtered['learning_product_type']=='COURSE'].shape[0])
# 	st.write("**Number of professional degrees:**",
# 		skill_filtered[skill_filtered['learning_product_type']=='PROFESSIONAL CERTIFICATE'].shape[0])
# 	st.write("**Number of specializations:**",
# 		skill_filtered[skill_filtered['learning_product_type']=='SPECIALIZATION'].shape[0])
# 	# basic plots
# 	chart = alt.Chart(skill_filtered).mark_bar().encode(
# 		y = 'course_provided_by:N',
# 		x = 'count(course_provided_by):Q'
# 	).properties(
# 		title = 'Organizations providing these courses'
# 	)
# 	st.altair_chart(chart)

# 	# there should be more than atleast 2 courses
# 	if(len(courses)<=2):
# 		st.write("*There should be atleast 3 courses. Do add more.*")

# 	input_course = st.sidebar.selectbox("Select Course", courses, key='courses')
	# use button to initiate content-based recommendations
	#else:
		#st.write("```Adjust the 'Select Skills' filter on the sidebar```")

	# rec_radio = st.sidebar.radio("Recommend Similar Courses", ('no', 'yes'), index=0)
	# if (rec_radio=='yes'):
	# 	content_based_recommendations(df, input_course, courses)

	# recommend based on selected course

	
if __name__=="__main__":
	app.run(debug=True)





